plot25[[parRunner]] <- ggplot(data = plotdata, aes(x = sim, y = est)) + geom_point(size = .1) + geom_smooth(method='lm') + ggtitle(parnames[parRunner]) + theme_bw(base_size = 8) + scale_x_continuous(breaks = trans_breaks(identity, identity, n = 2)) + scale_y_continuous(breaks = trans_breaks(identity, identity, n = 3)) + xlab("") + ylab("")
plotdata <- data.frame(sim = simFFX[,parRunner], est = estFFX_50[,parRunner])
plot50[[parRunner]] <- ggplot(data = plotdata, aes(x = sim, y = est)) + geom_point(size = .1) + geom_smooth(method='lm') + ggtitle(parnames[parRunner]) + theme_bw(base_size = 8) + scale_x_continuous(breaks = trans_breaks(identity, identity, n = 2)) + scale_y_continuous(breaks = trans_breaks(identity, identity, n = 3)) + xlab("") + ylab("")
plotdata <- data.frame(sim = simFFX[,parRunner], est = estFFX_75[,parRunner])
plot75[[parRunner]] <- ggplot(data = plotdata, aes(x = sim, y = est)) + geom_point(size = .1) + geom_smooth(method='lm') + ggtitle(parnames[parRunner]) + theme_bw(base_size = 8) + scale_x_continuous(breaks = trans_breaks(identity, identity, n = 2)) + scale_y_continuous(breaks = trans_breaks(identity, identity, n = 3)) + xlab("") + ylab("")
plotdata <- data.frame(sim = simFFX[,parRunner], est = estFFX_100[,parRunner])
plot100[[parRunner]] <- ggplot(data = plotdata, aes(x = sim, y = est)) + geom_point(size = .1) + geom_smooth(method='lm') + ggtitle(parnames[parRunner]) + theme_bw(base_size = 8) + scale_x_continuous(breaks = trans_breaks(identity, identity, n = 2)) + scale_y_continuous(breaks = trans_breaks(identity, identity, n = 3)) + xlab("") + ylab("")
}
# Aggregate plots ------------------------------------------------------
fullplot0 <- plot_grid(plot0[[1]], plot0[[2]], plot0[[3]], plot0[[4]], plot0[[5]], nrow = 1)
fullplot25 <- plot_grid(plot25[[1]], plot25[[2]], plot25[[3]], plot25[[4]], plot25[[5]], nrow = 1)
fullplot50 <- plot_grid(plot50[[1]], plot50[[2]], plot50[[3]], plot50[[4]], plot50[[5]], nrow = 1)
fullplot75<- plot_grid(plot75[[1]], plot75[[2]], plot75[[3]], plot75[[4]], plot75[[5]], nrow = 1)
fullplot100 <- plot_grid(plot100[[1]], plot100[[2]], plot100[[3]], plot100[[4]], plot100[[5]], nrow = 1)
allCorrPlots <- plot_grid(fullplot0, fullplot25, fullplot50, fullplot75, fullplot100, nrow = 5)
allCorrPlots
ggsave(file="allCorrPlots.svg", plot=allCorrPlots, width=16, height=16, units = "cm")
for (parRunner in 1:5){
plotdata <- data.frame(sim = simFFX[,parRunner], est = estFFX_0[,parRunner])
plot0[[parRunner]] <- ggplot(data = plotdata, aes(x = sim, y = est)) + geom_point(size = .1) + geom_smooth(method='lm') + theme_bw(base_size = 8) + scale_x_continuous(breaks = trans_breaks(identity, identity, n = 2)) + scale_y_continuous(breaks = trans_breaks(identity, identity, n = 3)) + xlab("") + ylab("")
plotdata <- data.frame(sim = simFFX[,parRunner], est = estFFX_25[,parRunner])
plot25[[parRunner]] <- ggplot(data = plotdata, aes(x = sim, y = est)) + geom_point(size = .1) + geom_smooth(method='lm') + theme_bw(base_size = 8) + scale_x_continuous(breaks = trans_breaks(identity, identity, n = 2)) + scale_y_continuous(breaks = trans_breaks(identity, identity, n = 3)) + xlab("") + ylab("")
plotdata <- data.frame(sim = simFFX[,parRunner], est = estFFX_50[,parRunner])
plot50[[parRunner]] <- ggplot(data = plotdata, aes(x = sim, y = est)) + geom_point(size = .1) + geom_smooth(method='lm') + theme_bw(base_size = 8) + scale_x_continuous(breaks = trans_breaks(identity, identity, n = 2)) + scale_y_continuous(breaks = trans_breaks(identity, identity, n = 3)) + xlab("") + ylab("")
plotdata <- data.frame(sim = simFFX[,parRunner], est = estFFX_75[,parRunner])
plot75[[parRunner]] <- ggplot(data = plotdata, aes(x = sim, y = est)) + geom_point(size = .1) + geom_smooth(method='lm') + theme_bw(base_size = 8) + scale_x_continuous(breaks = trans_breaks(identity, identity, n = 2)) + scale_y_continuous(breaks = trans_breaks(identity, identity, n = 3)) + xlab("") + ylab("")
plotdata <- data.frame(sim = simFFX[,parRunner], est = estFFX_100[,parRunner])
plot100[[parRunner]] <- ggplot(data = plotdata, aes(x = sim, y = est)) + geom_point(size = .1) + geom_smooth(method='lm') + theme_bw(base_size = 8) + scale_x_continuous(breaks = trans_breaks(identity, identity, n = 2)) + scale_y_continuous(breaks = trans_breaks(identity, identity, n = 3)) + xlab("") + ylab("")
}
# Aggregate plots ------------------------------------------------------
fullplot0 <- plot_grid(plot0[[1]], plot0[[2]], plot0[[3]], plot0[[4]], plot0[[5]], nrow = 1)
fullplot25 <- plot_grid(plot25[[1]], plot25[[2]], plot25[[3]], plot25[[4]], plot25[[5]], nrow = 1)
fullplot50 <- plot_grid(plot50[[1]], plot50[[2]], plot50[[3]], plot50[[4]], plot50[[5]], nrow = 1)
fullplot75<- plot_grid(plot75[[1]], plot75[[2]], plot75[[3]], plot75[[4]], plot75[[5]], nrow = 1)
fullplot100 <- plot_grid(plot100[[1]], plot100[[2]], plot100[[3]], plot100[[4]], plot100[[5]], nrow = 1)
allCorrPlots <- plot_grid(fullplot0, fullplot25, fullplot50, fullplot75, fullplot100, nrow = 5)
allCorrPlots
ggsave(file="allCorrPlots.svg", plot=allCorrPlots, width=16, height=16, units = "cm")
ggsave(file="allCorrPlots.svg", plot=allCorrPlots, width=16, height=16, units = "cm")
ggsave(file="allEstPlots.svg", plot=allEstPlots, width=16, height=16, units = "cm")
ggsave(file="esterrplot.svg", plot=esterrplot, width=16, height=6, units = "cm")
ezANOVA(esterrFFX_intercepts, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_PE, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LR, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_Abw, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LRbiasByPE, dv = value, within = tiling, wid = simRun)
# First, get absolute deviation between recovered FFX and underlying FFX for each simulation to quantify quality of recovery
esterrFFX_0   <- estFFX_0 - simFFX
esterrFFX_25  <- estFFX_25 - simFFX
esterrFFX_50  <- estFFX_50 - simFFX
esterrFFX_75  <- estFFX_75 - simFFX
esterrFFX_100 <- estFFX_100 - simFFX
esterrFFX_intercepts <- data.frame(FFX0 = esterrFFX_0[,1], FFX25 = esterrFFX_25[,1], FFX50 = esterrFFX_50[,1], FFX75 = esterrFFX_75[,1], FFX100 = esterrFFX_100[,1], simRun = c(1:nrow(esterrFFX_100)))
esterrFFX_PE         <- data.frame(FFX0 = esterrFFX_0[,2], FFX25 = esterrFFX_25[,2], FFX50 = esterrFFX_50[,2], FFX75 = esterrFFX_75[,2], FFX100 = esterrFFX_100[,2], simRun = c(1:nrow(esterrFFX_100)))
esterrFFX_LR         <- data.frame(FFX0 = esterrFFX_0[,3], FFX25 = esterrFFX_25[,3], FFX50 = esterrFFX_50[,3], FFX75 = esterrFFX_75[,3], FFX100 = esterrFFX_100[,3], simRun = c(1:nrow(esterrFFX_100)))
esterrFFX_Abw        <- data.frame(FFX0 = esterrFFX_0[,4], FFX25 = esterrFFX_25[,4], FFX50 = esterrFFX_50[,4], FFX75 = esterrFFX_75[,4], FFX100 = esterrFFX_100[,4], simRun = c(1:nrow(esterrFFX_100)))
esterrFFX_LRbiasByPE <- data.frame(FFX0 = esterrFFX_0[,5], FFX25 = esterrFFX_25[,5], FFX50 = esterrFFX_50[,5], FFX75 = esterrFFX_75[,5], FFX100 = esterrFFX_100[,5], simRun = c(1:nrow(esterrFFX_100)))
# Pivot into long format
esterrFFX_intercepts <- pivot_longer(esterrFFX_intercepts, cols = starts_with("FFX"))
esterrFFX_PE <- pivot_longer(esterrFFX_PE, cols = starts_with("FFX"))
esterrFFX_LR <- pivot_longer(esterrFFX_LR, cols = starts_with("FFX"))
esterrFFX_Abw <- pivot_longer(esterrFFX_Abw, cols = starts_with("FFX"))
esterrFFX_LRbiasByPE <- pivot_longer(esterrFFX_LRbiasByPE, cols = starts_with("FFX"))
# Add a factor named tiling for correct ordering of boxplots below, and for ANOVAs
esterrFFX_intercepts$tiling <- factor(esterrFFX_intercepts$name, levels = c("FFX0", "FFX25", "FFX50", "FFX75", "FFX100"))
esterrFFX_PE$tiling <- factor(esterrFFX_PE$name, levels = c("FFX0", "FFX25", "FFX50", "FFX75", "FFX100"))
esterrFFX_LR$tiling <- factor(esterrFFX_LR$name, levels = c("FFX0", "FFX25", "FFX50", "FFX75", "FFX100"))
esterrFFX_Abw$tiling <- factor(esterrFFX_Abw$name, levels = c("FFX0", "FFX25", "FFX50", "FFX75", "FFX100"))
esterrFFX_LRbiasByPE$tiling <- factor(esterrFFX_LRbiasByPE$name, levels = c("FFX0", "FFX25", "FFX50", "FFX75", "FFX100"))
# Turn simRun into factor
esterrFFX_intercepts$simRun <- factor(esterrFFX_intercepts$simRun)
esterrFFX_PE$simRun <- factor(esterrFFX_PE$simRun)
esterrFFX_LR$simRun <- factor(esterrFFX_LR$simRun)
esterrFFX_Abw$simRun <- factor(esterrFFX_Abw$simRun)
esterrFFX_LRbiasByPE$simRun <- factor(esterrFFX_LRbiasByPE$simRun)
# Run Anovas
ezANOVA(esterrFFX_intercepts, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_PE, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LR, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_Abw, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LRbiasByPE, dv = value, within = tiling, wid = simRun)
# Make some more plots to show estimation errors for each parameter
esterrplot_intercepts <- ggplot(data = esterrFFX_intercepts, aes(x = tiling, y = value)) + geom_boxplot() + xlab("") + ylab("") + labs(title = "Intercept") +
scale_x_discrete(breaks=c("FFX0", "FFX50", "FFX100"), labels=c("FFX0" = "0", "FFX50" = "50", "FFX100" = "100")) + theme_bw(base_size = 8)
esterrplot_PE <- ggplot(data = esterrFFX_PE, aes(x = tiling, y = value)) + geom_boxplot() + xlab("") + ylab("") + labs(title = "PE") +
scale_x_discrete(breaks=c("FFX0", "FFX50", "FFX100"), labels=c("FFX0" = "0", "FFX50" = "50", "FFX100" = "100")) + theme_bw(base_size = 8)
esterrplot_LR <- ggplot(data = esterrFFX_LR, aes(x = tiling, y = value)) + geom_boxplot() + xlab("") + ylab("") + labs(title = "LRbias") +
scale_x_discrete(breaks=c("FFX0", "FFX50", "FFX100"), labels=c("FFX0" = "0", "FFX50" = "50", "FFX100" = "100")) + theme_bw(base_size = 8)
esterrplot_Abw <- ggplot(data = esterrFFX_Abw, aes(x = tiling, y = value)) + geom_boxplot() + xlab("") + ylab("") + labs(title = "|PE|") +
scale_x_discrete(breaks=c("FFX0", "FFX50", "FFX100"), labels=c("FFX0" = "0", "FFX50" = "50", "FFX100" = "100")) + theme_bw(base_size = 8)
esterrplot_LRbyPE <- ggplot(data = esterrFFX_LRbiasByPE, aes(x = tiling, y = value)) + geom_boxplot() + xlab("") + ylab("") + labs(title = "LRbias * PE") +
scale_x_discrete(breaks=c("FFX0", "FFX50", "FFX100"), labels=c("FFX0" = "0", "FFX50" = "50", "FFX100" = "100")) + theme_bw(base_size = 8)
esterrplot <- plot_grid(esterrplot_intercepts, esterrplot_PE, esterrplot_LR, esterrplot_Abw, esterrplot_LRbyPE, ncol = 5)
esterrplot
ggsave(file="esterrplot.svg", plot=esterrplot, width=16, height=6, units = "cm")
# Next, get absolute deviation between recovered FFX and underlying FFX for each simulation to quantify quality of recovery
absEstErrFFX_0   <- abs(estFFX_0 - simFFX)
absEstErrFFX_25  <- abs(estFFX_25 - simFFX)
absEstErrFFX_50  <- abs(estFFX_50 - simFFX)
absEstErrFFX_75  <- abs(estFFX_75 - simFFX)
absEstErrFFX_100 <- abs(estFFX_100 - simFFX)
absEstErrFFX_intercepts <- data.frame(FFX0 = absEstErrFFX_0[,1], FFX25 = absEstErrFFX_25[,1], FFX50 = absEstErrFFX_50[,1], FFX75 = absEstErrFFX_75[,1], FFX100 = absEstErrFFX_100[,1], simRun = c(1:nrow(absEstErrFFX_100)))
absEstErrFFX_PE         <- data.frame(FFX0 = absEstErrFFX_0[,2], FFX25 = absEstErrFFX_25[,2], FFX50 = absEstErrFFX_50[,2], FFX75 = absEstErrFFX_75[,2], FFX100 = absEstErrFFX_100[,2], simRun = c(1:nrow(absEstErrFFX_100)))
absEstErrFFX_LR         <- data.frame(FFX0 = absEstErrFFX_0[,3], FFX25 = absEstErrFFX_25[,3], FFX50 = absEstErrFFX_50[,3], FFX75 = absEstErrFFX_75[,3], FFX100 = absEstErrFFX_100[,3], simRun = c(1:nrow(absEstErrFFX_100)))
absEstErrFFX_Abw        <- data.frame(FFX0 = absEstErrFFX_0[,4], FFX25 = absEstErrFFX_25[,4], FFX50 = absEstErrFFX_50[,4], FFX75 = absEstErrFFX_75[,4], FFX100 = absEstErrFFX_100[,4], simRun = c(1:nrow(absEstErrFFX_100)))
absEstErrFFX_LRbiasByPE <- data.frame(FFX0 = absEstErrFFX_0[,5], FFX25 = absEstErrFFX_25[,5], FFX50 = absEstErrFFX_50[,5], FFX75 = absEstErrFFX_75[,5], FFX100 = absEstErrFFX_100[,5], simRun = c(1:nrow(absEstErrFFX_100)))
# Pivot into long format
absEstErrFFX_intercepts <- pivot_longer(absEstErrFFX_intercepts, cols = starts_with("FFX"))
absEstErrFFX_PE <- pivot_longer(absEstErrFFX_PE, cols = starts_with("FFX"))
absEstErrFFX_LR <- pivot_longer(absEstErrFFX_LR, cols = starts_with("FFX"))
absEstErrFFX_Abw <- pivot_longer(absEstErrFFX_Abw, cols = starts_with("FFX"))
absEstErrFFX_LRbiasByPE <- pivot_longer(absEstErrFFX_LRbiasByPE, cols = starts_with("FFX"))
# Add a factor named tiling for correct ordering of boxplots below, and for ANOVAs
absEstErrFFX_intercepts$tiling <- factor(absEstErrFFX_intercepts$name, levels = c("FFX0", "FFX25", "FFX50", "FFX75", "FFX100"))
absEstErrFFX_PE$tiling <- factor(absEstErrFFX_PE$name, levels = c("FFX0", "FFX25", "FFX50", "FFX75", "FFX100"))
absEstErrFFX_LR$tiling <- factor(absEstErrFFX_LR$name, levels = c("FFX0", "FFX25", "FFX50", "FFX75", "FFX100"))
absEstErrFFX_Abw$tiling <- factor(absEstErrFFX_Abw$name, levels = c("FFX0", "FFX25", "FFX50", "FFX75", "FFX100"))
absEstErrFFX_LRbiasByPE$tiling <- factor(absEstErrFFX_LRbiasByPE$name, levels = c("FFX0", "FFX25", "FFX50", "FFX75", "FFX100"))
# Turn simRun into factor
absEstErrFFX_intercepts$simRun <- factor(absEstErrFFX_intercepts$simRun)
absEstErrFFX_PE$simRun <- factor(absEstErrFFX_PE$simRun)
absEstErrFFX_LR$simRun <- factor(absEstErrFFX_LR$simRun)
absEstErrFFX_Abw$simRun <- factor(absEstErrFFX_Abw$simRun)
absEstErrFFX_LRbiasByPE$simRun <- factor(absEstErrFFX_LRbiasByPE$simRun)
# Run Anovas
ezANOVA(absEstErrFFX_intercepts, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_PE, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_LR, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_Abw, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_LRbiasByPE, dv = value, within = tiling, wid = simRun)
# Make some more plots to show estimation errors for each parameter
absEstErrPlot_intercepts <- ggplot(data = absEstErrFFX_intercepts, aes(x = tiling, y = value)) + geom_boxplot() + xlab("") + ylab("") + labs(title = "Intercept") +
scale_x_discrete(breaks=c("FFX0", "FFX50", "FFX100"), labels=c("FFX0" = "0", "FFX50" = "50", "FFX100" = "100")) + theme_bw(base_size = 8)
absEstErrPlot_PE <- ggplot(data = absEstErrFFX_PE, aes(x = tiling, y = value)) + geom_boxplot() + xlab("") + ylab("") + labs(title = "PE") +
scale_x_discrete(breaks=c("FFX0", "FFX50", "FFX100"), labels=c("FFX0" = "0", "FFX50" = "50", "FFX100" = "100")) + theme_bw(base_size = 8)
absEstErrPlot_LR <- ggplot(data = absEstErrFFX_LR, aes(x = tiling, y = value)) + geom_boxplot() + xlab("") + ylab("") + labs(title = "LRbias") +
scale_x_discrete(breaks=c("FFX0", "FFX50", "FFX100"), labels=c("FFX0" = "0", "FFX50" = "50", "FFX100" = "100")) + theme_bw(base_size = 8)
absEstErrPlot_Abw <- ggplot(data = absEstErrFFX_Abw, aes(x = tiling, y = value)) + geom_boxplot() + xlab("") + ylab("") + labs(title = "|PE|") +
scale_x_discrete(breaks=c("FFX0", "FFX50", "FFX100"), labels=c("FFX0" = "0", "FFX50" = "50", "FFX100" = "100")) + theme_bw(base_size = 8)
absEstErrPlot_LRbyPE <- ggplot(data = absEstErrFFX_LRbiasByPE, aes(x = tiling, y = value)) + geom_boxplot() + xlab("") + ylab("") + labs(title = "LRbias * PE") +
scale_x_discrete(breaks=c("FFX0", "FFX50", "FFX100"), labels=c("FFX0" = "0", "FFX50" = "50", "FFX100" = "100")) + theme_bw(base_size = 8)
absEstErrPlot <- plot_grid(absEstErrPlot_intercepts, absEstErrPlot_PE, absEstErrPlot_LR, absEstErrPlot_Abw, absEstErrPlot_LRbyPE, ncol = 5)
absEstErrPlot
ezANOVA(esterrFFX_intercepts, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_PE, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LR, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_Abw, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LRbiasByPE, dv = value, within = tiling, wid = simRun)
library(ez)
ezANOVA(esterrFFX_intercepts, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_PE, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LR, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_Abw, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LRbiasByPE, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_intercepts, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_PE, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_LR, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_Abw, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_LRbiasByPE, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_intercepts_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_PE_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_LRbias_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_Abw_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_LRbiasByPE_minusEmpirical, dv = value, within = tiling, wid = simRun)
abs_estFFX_intercepts_minusEmpirical <- estFFX_intercepts
abs_estFFX_intercepts_minusEmpirical$value <- abs(abs_estFFX_intercepts_minusEmpirical$value - fixef(modelbias)[1])
abs_estFFX_PE_minusEmpirical <- estFFX_PE
abs_estFFX_PE_minusEmpirical$value <- abs(abs_estFFX_PE_minusEmpirical$value - fixef(modelbias)[2])
abs_estFFX_LRbias_minusEmpirical <- estFFX_LRbias
abs_estFFX_LRbias_minusEmpirical$value <- abs(abs_estFFX_LRbias_minusEmpirical$value - fixef(modelbias)[3])
abs_estFFX_Abw_minusEmpirical <- estFFX_Abw
abs_estFFX_Abw_minusEmpirical$value <- abs(abs_estFFX_Abw_minusEmpirical$value - fixef(modelbias)[4])
abs_estFFX_LRbiasByPE_minusEmpirical <- estFFX_LRbiasByPE
abs_estFFX_LRbiasByPE_minusEmpirical$value <- abs(abs_estFFX_LRbiasByPE_minusEmpirical$value - fixef(modelbias)[5])
# Run Anovas to test whether FFX estimates form sim data is affected by tiling
ezANOVA(abs_estFFX_intercepts_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_PE_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_LRbias_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_Abw_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_LRbiasByPE_minusEmpirical, dv = value, within = tiling, wid = simRun)
# Run Anovas to test whether FFX estimates form sim data is affected by tiling
ezANOVA(abs_estFFX_intercepts_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_PE_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_LRbias_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_Abw_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_LRbiasByPE_minusEmpirical, dv = value, within = tiling, wid = simRun)
abs_estFFX_intercepts_minusEmpirical
modelPEAbwrfx %>% summary()
# Load packages -----------------------------------------------------------
library(ggplot2)
library(scales)
library(lme4)
library(lmerTest)
library(tidyverse)
library(readxl)
library(cowplot)
library(ez)
modelPEAbwrfx %>% summary()
modelbias %>% summary()
modelbiasAsInPaper %>% summary()
library(ggplot2)
library(scales)
library(lme4)
library(lmerTest)
library(tidyverse)
library(readxl)
library(cowplot)
library(ez)
ezANOVA(esterrFFX_intercepts, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_PE, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LR, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_Abw, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LRbiasByPE, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_intercepts, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_PE, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LR, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_Abw, dv = value, within = tiling, wid = simRun)
ezANOVA(esterrFFX_LRbiasByPE, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_intercepts, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_PE, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_LR, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_Abw, dv = value, within = tiling, wid = simRun)
ezANOVA(absEstErrFFX_LRbiasByPE, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_intercepts_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_PE_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_LRbias_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_Abw_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_LRbiasByPE_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_intercepts_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_PE_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_LRbias_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_Abw_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_LRbiasByPE_minusEmpirical, dv = value, within = tiling, wid = simRun)
estFFX_intercepts_minusEmpirical$tiling
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == FFX0])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX0"])
clc
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX100"])
t.test(abs_estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX0"])
t.test(abs_estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX25"])
t.test(abs_estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX50"])
t.test(abs_estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX75"])
t.test(abs_estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX100"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX100"])
t.test(estFFX_PE_minusEmpirical$value[estFFX_PE_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_PE_minusEmpirical$value[estFFX_PE_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_PE_minusEmpirical$value[estFFX_PE_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_PE_minusEmpirical$value[estFFX_PE_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_PE_minusEmpirical$value[estFFX_PE_minusEmpirical$tiling == "FFX100"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX100"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX100"])
t.test(estFFX_Abw_minusEmpirical$value[estFFX_Abw_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_Abw_minusEmpirical$value[estFFX_Abw_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_Abw_minusEmpirical$value[estFFX_Abw_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_Abw_minusEmpirical$value[estFFX_Abw_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_Abw_minusEmpirical$value[estFFX_Abw_minusEmpirical$tiling == "FFX100"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX100"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX100"])
wilcox.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX0"])
wilcox.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX25"])
wilcox.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX50"])
wilcox.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX75"])
wilcox.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX100"])
# Check whether recovered FFX differ from empirical FFX
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_intercepts_minusEmpirical$value[estFFX_intercepts_minusEmpirical$tiling == "FFX100"])
t.test(estFFX_PE_minusEmpirical$value[estFFX_PE_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_PE_minusEmpirical$value[estFFX_PE_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_PE_minusEmpirical$value[estFFX_PE_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_PE_minusEmpirical$value[estFFX_PE_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_PE_minusEmpirical$value[estFFX_PE_minusEmpirical$tiling == "FFX100"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_LRbias_minusEmpirical$value[estFFX_LRbias_minusEmpirical$tiling == "FFX100"])
t.test(estFFX_Abw_minusEmpirical$value[estFFX_Abw_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_Abw_minusEmpirical$value[estFFX_Abw_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_Abw_minusEmpirical$value[estFFX_Abw_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_Abw_minusEmpirical$value[estFFX_Abw_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_Abw_minusEmpirical$value[estFFX_Abw_minusEmpirical$tiling == "FFX100"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX0"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX25"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX50"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX75"])
t.test(estFFX_LRbiasByPE_minusEmpirical$value[estFFX_LRbiasByPE_minusEmpirical$tiling == "FFX100"])
# Run Anovas to test whether deviations between recovered and empirical FFX are driven by tiling
ezANOVA(estFFX_intercepts_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_PE_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_LRbias_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_Abw_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_LRbiasByPE_minusEmpirical, dv = value, within = tiling, wid = simRun)
library(ez)
# Run Anovas to test whether deviations between recovered and empirical FFX are driven by tiling
ezANOVA(estFFX_intercepts_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_PE_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_LRbias_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_Abw_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(estFFX_LRbiasByPE_minusEmpirical, dv = value, within = tiling, wid = simRun)
# Run Anovas to test whether absolute deviation between recovered and empirical FFX is driven by tiling
ezANOVA(abs_estFFX_intercepts_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_PE_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_LRbias_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_Abw_minusEmpirical, dv = value, within = tiling, wid = simRun)
ezANOVA(abs_estFFX_LRbiasByPE_minusEmpirical, dv = value, within = tiling, wid = simRun)
estFFX_0
allCorrPlots
simFFX
bla <- cor.test(simFFX[,1], estFFX_0[,1])
bla
bla$p.value
cor.test(simFFX[,1], estFFX_0[,1])$p.value
simestcorstats0 <- array()
simestpvalues0 <- array()
simestcorstats25 <- array()
simestpvalues25 <- array()
simestcorstats50 <- array()
simestpvalues50 <- array()
simestcorstats75 <- array()
simestpvalues75 <- array()
simestcorstats100 <- array()
simestpvalues100 <- array()
for (parRunner in 1:5){
simestcorstats0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner])$statistic
simestpvalues0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner])$statistic
simestcorstats25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner])$statistic
simestpvalues25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner])$statistic
simestcorstats50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner])$statistic
simestpvalues50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner])$statistic
simestcorstats75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner])$statistic
simestpvalues75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner])$statistic
simestcorstats100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner])$statistic
simestpvalues100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner])$statistic
}
simestcorstats0
bla$estimate
simestestimate0 <- array()
simestpvalues0 <- array()
simestestimate25 <- array()
simestpvalues25 <- array()
simestestimate50 <- array()
simestpvalues50 <- array()
simestestimate75 <- array()
simestpvalues75 <- array()
simestestimate100 <- array()
simestpvalues100 <- array()
for (parRunner in 1:5){
simestestimate0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner])$statistic
simestpvalues0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner])$statistic
simestestimate25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner])$statistic
simestpvalues25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner])$statistic
simestestimate50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner])$statistic
simestpvalues50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner])$statistic
simestestimate75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner])$statistic
simestpvalues75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner])$statistic
simestestimate100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner])$statistic
simestpvalues100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner])$statistic
}
simestestimate0
simestpvalues0
simeststatistic0 <- array()
simestpvalues0 <- array()
simestestimate0 <- array()
simeststatistic25 <- array()
simestpvalues25 <- array()
simestestimate25 <- array()
simeststatistic50 <- array()
simestpvalues50 <- array()
simestestimate50 <- array()
simeststatistic75 <- array()
simestpvalues75 <- array()
simestestimate75 <- array()
simeststatistic100 <- array()
simestpvalues100 <- array()
simestestimate100 <- array()
for (parRunner in 1:5){
simeststatistic0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner])$statistic
simestpvalues0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner])$p.value
simestestimate0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner])$estimate
simeststatistic25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner])$statistic
simestpvalues25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner])$p.value
simestestimate25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner])$estimate
simeststatistic50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner])$statistic
simestpvalues50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner])$p.value
simestestimate50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner])$estimate
simeststatistic75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner])$statistic
simestpvalues75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner])$p.value
simestestimate75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner])$estimate
simeststatistic100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner])$statistic
simestpvalues100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner])$p.value
simestestimate100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner])$estimate
}
simestpvalues0
p.adjust(simestpvalues0, method = 'fdr')
p.adjust(simestpvalues25, method = 'fdr')
p.adjust(simestpvalues50, method = 'fdr')
p.adjust(simestpvalues75, method = 'fdr')
p.adjust(simestpvalues100, method = 'fdr')
for (parRunner in 1:5){
simeststatistic0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner])$statistic
simestpvalues0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner])$p.value
simestestimate0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner])$estimate
simeststatistic25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner])$statistic
simestpvalues25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner])$p.value
simestestimate25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner])$estimate
simeststatistic50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner])$statistic
simestpvalues50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner])$p.value
simestestimate50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner])$estimate
simeststatistic75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner])$statistic
simestpvalues75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner])$p.value
simestestimate75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner])$estimate
simeststatistic100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner])$statistic
simestpvalues100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner])$p.value
simestestimate100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner])$estimate
p.adjust(c(simestpvalues0[parRunner], simestpvalues25[parRunner], simestpvalues50[parRunner], simestpvalues75[parRunner], simestpvalues100[parRunner]), method = "fdr")
}
p.adjust(c(simestpvalues0[parRunner], simestpvalues25[parRunner], simestpvalues50[parRunner], simestpvalues75[parRunner], simestpvalues100[parRunner]), method = "fdr")
p.adjust(c(simestpvalues0[1], simestpvalues25[1], simestpvalues50[1], simestpvalues75[1], simestpvalues100[1]), method = "fdr")
p.adjust(c(simestpvalues0[2], simestpvalues25[2], simestpvalues50[2], simestpvalues75[2], simestpvalues100[2]), method = "fdr")
p.adjust(c(simestpvalues0[3], simestpvalues25[3], simestpvalues50[3], simestpvalues75[3], simestpvalues100[3]), method = "fdr")
p.adjust(c(simestpvalues0[4], simestpvalues25[4], simestpvalues50[4], simestpvalues75[4], simestpvalues100[4]), method = "fdr")
p.adjust(c(simestpvalues0[5], simestpvalues25[5], simestpvalues50[5], simestpvalues75[5], simestpvalues100[5]), method = "fdr")
p.adjust(c(simestpvalues0[1], simestpvalues25[1], simestpvalues50[1], simestpvalues75[1], simestpvalues100[1]), method = "fdr")
p.adjust(c(simestpvalues0[2], simestpvalues25[2], simestpvalues50[2], simestpvalues75[2], simestpvalues100[2]), method = "fdr")
p.adjust(c(simestpvalues0[3], simestpvalues25[3], simestpvalues50[3], simestpvalues75[3], simestpvalues100[3]), method = "fdr")
p.adjust(c(simestpvalues0[4], simestpvalues25[4], simestpvalues50[4], simestpvalues75[4], simestpvalues100[4]), method = "fdr")
p.adjust(c(simestpvalues0[5], simestpvalues25[5], simestpvalues50[5], simestpvalues75[5], simestpvalues100[5]), method = "fdr")
simestpvalues0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner], alternative = "greater")$p.value
simeststatistic0 <- array()
simestpvalues0 <- array()
simestestimate0 <- array()
simeststatistic25 <- array()
simestpvalues25 <- array()
simestestimate25 <- array()
simeststatistic50 <- array()
simestpvalues50 <- array()
simestestimate50 <- array()
simeststatistic75 <- array()
simestpvalues75 <- array()
simestestimate75 <- array()
simeststatistic100 <- array()
simestpvalues100 <- array()
simestestimate100 <- array()
for (parRunner in 1:5){
simeststatistic0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner], alternative = "greater")$statistic
simestpvalues0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner], alternative = "greater")$p.value
simestestimate0[parRunner] <- cor.test(simFFX[,parRunner], estFFX_0[,parRunner], alternative = "greater")$estimate
simeststatistic25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner], alternative = "greater")$statistic
simestpvalues25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner], alternative = "greater")$p.value
simestestimate25[parRunner] <- cor.test(simFFX[,parRunner], estFFX_25[,parRunner], alternative = "greater")$estimate
simeststatistic50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner], alternative = "greater")$statistic
simestpvalues50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner], alternative = "greater")$p.value
simestestimate50[parRunner] <- cor.test(simFFX[,parRunner], estFFX_50[,parRunner], alternative = "greater")$estimate
simeststatistic75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner], alternative = "greater")$statistic
simestpvalues75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner], alternative = "greater")$p.value
simestestimate75[parRunner] <- cor.test(simFFX[,parRunner], estFFX_75[,parRunner], alternative = "greater")$estimate
simeststatistic100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner], alternative = "greater")$statistic
simestpvalues100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner], alternative = "greater")$p.value
simestestimate100[parRunner] <- cor.test(simFFX[,parRunner], estFFX_100[,parRunner], alternative = "greater")$estimate
}
p.adjust(c(simestpvalues0[1], simestpvalues25[1], simestpvalues50[1], simestpvalues75[1], simestpvalues100[1]), method = "fdr")
p.adjust(c(simestpvalues0[2], simestpvalues25[2], simestpvalues50[2], simestpvalues75[2], simestpvalues100[2]), method = "fdr")
p.adjust(c(simestpvalues0[3], simestpvalues25[3], simestpvalues50[3], simestpvalues75[3], simestpvalues100[3]), method = "fdr")
p.adjust(c(simestpvalues0[4], simestpvalues25[4], simestpvalues50[4], simestpvalues75[4], simestpvalues100[4]), method = "fdr")
p.adjust(c(simestpvalues0[5], simestpvalues25[5], simestpvalues50[5], simestpvalues75[5], simestpvalues100[5]), method = "fdr")
# Correct correlations for Intercept
p.adjust(c(simestpvalues0[1], simestpvalues25[1], simestpvalues50[1], simestpvalues75[1], simestpvalues100[1]), method = "fdr")
# Correct correlations for PE
p.adjust(c(simestpvalues0[2], simestpvalues25[2], simestpvalues50[2], simestpvalues75[2], simestpvalues100[2]), method = "fdr")
# Correct correlations for LRbias
p.adjust(c(simestpvalues0[3], simestpvalues25[3], simestpvalues50[3], simestpvalues75[3], simestpvalues100[3]), method = "fdr")
# Correct correlations for Abw
p.adjust(c(simestpvalues0[4], simestpvalues25[4], simestpvalues50[4], simestpvalues75[4], simestpvalues100[4]), method = "fdr")
# Correct correlations for LRbias:PE
p.adjust(c(simestpvalues0[5], simestpvalues25[5], simestpvalues50[5], simestpvalues75[5], simestpvalues100[5]), method = "fdr")
# Correct correlations for Intercept
p.adjust(c(simestpvalues0[1], simestpvalues25[1], simestpvalues50[1], simestpvalues75[1], simestpvalues100[1]), method = "holm")
# Correct correlations for PE
p.adjust(c(simestpvalues0[2], simestpvalues25[2], simestpvalues50[2], simestpvalues75[2], simestpvalues100[2]), method = "holm")
# Correct correlations for LRbias
p.adjust(c(simestpvalues0[3], simestpvalues25[3], simestpvalues50[3], simestpvalues75[3], simestpvalues100[3]), method = "holm")
# Correct correlations for Abw
p.adjust(c(simestpvalues0[4], simestpvalues25[4], simestpvalues50[4], simestpvalues75[4], simestpvalues100[4]), method = "holm")
# Correct correlations for LRbias:PE
p.adjust(c(simestpvalues0[5], simestpvalues25[5], simestpvalues50[5], simestpvalues75[5], simestpvalues100[5]), method = "holm")
